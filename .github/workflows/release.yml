name: Release

on:
  release:
    types: [created]

jobs:
  build-release:
    runs-on: ubuntu-latest
    steps:
    
      #############
      # Preparation
      - uses: actions/checkout@v2
      - uses: docker/setup-qemu-action@v1
      - uses: docker/setup-buildx-action@v1

      - name: Get version name
        shell: bash
        run: echo "##[set-output name=version;]$(echo ${GITHUB_REF/refs\/tags\//} | sed -ne 's/[^0-9]*\(\([0-9]\.\)\{0,4\}[0-9]\(-[a-zA-Z]*\)*\).*/\1/p')" 
        id: get_version

      - name: check version name
        run: '[ -z "${{ steps.get_version.outputs.version }}" ] && echo "invalid version" && exit 1'

      - name: Add commit hash to artifact
        run: echo $GITHUB_SHA >> oag/commit-hash.txt

      - name: "Compile container tag"
        run: echo "tag=owasp/application-gateway:v${{ steps.get_version.outputs.version }}" >> $GITHUB_ENV

      - name: Get release
        id: get_release
        uses: bruceadams/get-release@v1.2.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      #############
      # Docker build
      - name: Docker Build
        run: docker build -t ${{ env.tag }} .

      # Dockle Check
      - name: Install Dockle
        run: VERSION=$(curl --silent "https://api.github.com/repos/goodwithtech/dockle/releases/latest" | grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/') && curl -L -o dockle.tar.gz https://github.com/goodwithtech/dockle/releases/download/v${VERSION}/dockle_${VERSION}_Linux-64bit.tar.gz &&  tar zxvf dockle.tar.gz
      - name: Run Dockle Tests
        run: ./dockle --exit-code 1 ${{ env.tag }}

      #############
      # Post build: extract binary from docker build and publish artifact
      - name: Docker create
        run: docker create --name build ${{ env.tag }}
      
      - name: Create build folder
        run: mkdir build

      - name: Copy binary from container
        run: docker cp "build:/app/" build/ 

      - name: Clean up container
        run: docker rm build

      - name: Publish Artifact
        uses: actions/upload-artifact@v2
        with:
            path: build
            retention-days: 5

      # Assemble and upload release assets
      - uses: papeloto/action-zip@v1
        with:
          files: build/
          recursive: false
          dest: oag-${{ steps.get_version.outputs.VERSION }}.zip

      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: ./oag-${{ steps.get_version.outputs.VERSION }}.zip
          asset_name: oag-${{ steps.get_version.outputs.VERSION }}.zip
          asset_content_type: application/gzip

      # Docker Push
      - name: Docker Login
        run: docker login --username gianlucafrei --password ${{ secrets.DOCKER_PASSWORD }}
      - name: Docker Push
        run: docker push ${{ env.tag }}
  
  deploy-mvn-central:
    name: Build with maven and deploy to maven central
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 15
        server-username: MAVEN_USERNAME # env variable for username in deploy
        server-password: MAVEN_CENTRAL_TOKEN # env variable for token in deploy
        gpg-private-key: ${{ secrets.GPG_KEY }} # Value of the GPG private key to import
        gpg-passphrase: MAVEN_GPG_PASSPHRASE # env variable for GPG private key passphrase

    - name: Get version name
      shell: bash
      run: echo "##[set-output name=version;]$(echo ${GITHUB_REF/refs\/tags\//} | sed -ne 's/[^0-9]*\(\([0-9]\.\)\{0,4\}[0-9]\(-[a-zA-Z]*\)*\).*/\1/p')" 
      id: get_version

    - name: check version name
      run: '[ -z "${{ steps.get_version.outputs.version }}" ] && echo "invalid version" && exit 1'

    - name: Add commit hash to artifact
      run: echo $GITHUB_SHA >> oag/commit-hash.txt

    - name: Update maven version
      run: mvn versions:set -DnewVersion=${{ steps.get_version.outputs.version }} -DgenerateBackupPoms=false

    - name: Build & Publish to Apache Maven Central
      run: mvn -B deploy --file oag/pom.xml -Pgpg-sign -DrepositoryID=ossrh -DskipTests
      env:
        MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
        MAVEN_CENTRAL_TOKEN: ${{ secrets.MAVEN_TOKEN }}
        MAVEN_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}