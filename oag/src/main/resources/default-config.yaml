trustedRedirectHosts: [ ]

sessionBehaviour:
  sessionDuration: 3600
  renewWhenLessThan: 1800
  redirectLoginSuccess: /
  redirectLoginFailure: /
  redirectLogout: /

securityProfiles:

  static:
    allowedMethods: [ "GET", "HEAD", "OPTIONS" ]
    csrfProtection: none
    responseHeaders:
      Server: <<remove>>
      X-Powered-By: <<remove>>
      X-XSS-Protection: 1; mode=block;
      X-Frame-Options: SAMEORIGIN
      X-Content-Type-Options: nosniff
      Referrer-Policy: strict-origin-when-cross-origin
      Content-Security-Policy: upgrade-insecure-requests;base-uri 'self';object-src 'self'
      Permissions-Policy: geolocation=(),notifications=(),push=(),microphone=(),camera=(),speaker=(),vibrate=(),fullscreen=(),payment=(),usb=(),magnetometer=(),gyroscope=(),accelerometer=()
      Strict-Transport-Security: max-age=31536000; includeSubDomains
    userMapping:
      type: "no-mapping"
      settings: {}


  webapplication:
    allowedMethods: [ "GET", "PUT", "POST", "PATCH", "DELETE", "OPTIONS", "HEAD" ]
    csrfProtection: samesite-strict-cookie
    responseHeaders:
      Server: <<remove>>
      X-Powered-By: <<remove>>
      X-XSS-Protection: 1; mode=block;
      X-Frame-Options: SAMEORIGIN
      X-Content-Type-Options: nosniff
      Referrer-Policy: strict-origin-when-cross-origin
      Content-Security-Policy: upgrade-insecure-requests;base-uri 'self';object-src 'self'
      Permissions-Policy: geolocation=(),notifications=(),push=(),microphone=(),camera=(),speaker=(),vibrate=(),fullscreen=(),payment=(),usb=(),magnetometer=(),gyroscope=(),accelerometer=()
      Strict-Transport-Security: max-age=31536000; includeSubDomains
    userMapping:
      type: "jwt-mapping"
      settings:
        headerName: "Authorization"
        headerPrefix: "Bearer "
        audience: "<<route-url>>"
        issuer: "<<hostUri>>"
        tokenLifetimeSeconds: 30
        signatureImplementation: "stub"
        signatureSettings: {}
        mappings:
          email_verified: userModel:email_verified
          email:          userModel:email

  apiforspa:
    allowedMethods: [ "GET", "PUT", "POST", "PATCH", "DELETE", "OPTIONS", "HEAD" ]
    csrfProtection: double-submit-cookie
    responseHeaders:
      Server: <<remove>>
      X-Powered-By: <<remove>>
      X-Content-Type-Options: nosniff
      Referrer-Policy: no-referrer
      Content-Security-Policy: upgrade-insecure-requests; default-src 'none'; base-uri 'self'; frame-ancestors 'none'
      Strict-Transport-Security: max-age=31536000; includeSubDomains
    userMapping:
      type: "jwt-mapping"
      settings:
        headerName: "Authorization"
        headerPrefix: "Bearer "
        audience: "<<route-url>>"
        issuer: "<<hostUri>>"
        tokenLifetimeSeconds: 30
        signatureImplementation: "stub"
        signatureSettings: { }
        mappings:
          email_verified: userModel:email_verified
          email: userModel:email

  apiforexternal:
    allowedMethods: [ "GET", "PUT", "POST", "PATCH", "DELETE", "OPTIONS", "HEAD" ]
    csrfProtection: none
    responseHeaders:
      Server: <<remove>>
      X-Powered-By: <<remove>>
    userMapping:
      type: "no-mapping"
      settings: {}

  raw-proxy:
    allowedMethods: [ "GET", "PUT", "POST", "PATCH", "DELETE", "OPTIONS", "HEAD" ]
    csrfProtection: none
    responseHeaders: {}
    userMapping:
      type: "no-mapping"
      settings: {}

traceProfile:
  forwardIncomingTrace: false
  maxLengthIncomingTrace: 254
  acceptAdditionalTraceInfo: false
  maxLengthAdditionalTraceInfo: 254
  sendTraceResponse: false
  type: w3cTrace
  traceImplSpecificSettings:
    traceImplSpecificParameter: "not used"
